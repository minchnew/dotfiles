set nocursorline " don't highlight current line

" keyboard shortcuts
inoremap jj <ESC>

" highlight search
"set hlsearch
"nmap <leader>hl :let @/ = ""<CR>

" gui settings
if (&t_Co == 256 || has('gui_running'))
  if ($TERM_PROGRAM == 'iTerm.app')
    colorscheme solarized
  else
    set background=dark
    colorscheme solarized
  endif
else
  set background=dark
  colorscheme solarized
endif

" Disambiguate ,a & ,t from the Align plugin, making them fast again.
"
" This section is here to prevent AlignMaps from adding a bunch of mappings
" that interfere with the very-common ,a and ,t mappings. This will get run
" at every startup to remove the AlignMaps for the *next* vim startup.
"
" If you do want the AlignMaps mappings, remove this section, remove
" ~/.vim/bundle/Align, and re-run rake in maximum-awesome.
function! s:RemoveConflictingAlignMaps()
  if exists("g:loaded_AlignMapsPlugin")
    AlignMapsClean
  endif
endfunction
command! -nargs=0 RemoveConflictingAlignMaps call s:RemoveConflictingAlignMaps()
silent! autocmd VimEnter * RemoveConflictingAlignMaps

" General {
      set history=100
" }

" Vim UI {
      if has('statusline')
          set laststatus=2
          set statusline=%F%m%r%h%w\ FORMAT=[%{&ff}]\ TYPE=%y\ %4l,%-4v\ %L\ lines\ --%p%%--
      endif
      set relativenumber
      set backspace=indent,eol,start    " backspace for dummys
      set showmatch
      set hlsearch
      set wildmode=list:longest,full
      set whichwrap=b,s,h,l,<,>,[,]    " backspace and cursor keys wrap to
      set scrolljump=1    " lines to scroll when cursor leaves screen
      set scrolloff=0
      set foldenable
" }

" Folding {
    set foldmethod=manual
    set foldlevel=20
    set foldlevelstart=20
" }

" Formatting {
    set shiftwidth=4
    set expandtab
    set tabstop=4
    set softtabstop=0
    autocmd FileType html,javascript setlocal shiftwidth=2 tabstop=2
" }

" Key (re)Mappings {
    " For when you forget to sudo.. Really Write the file.
    cmap w!! w !sudo tee % >/dev/null
" }

" Plugins {
    " vim-go {
          let g:go_def_mode='gopls'
          let g:go_info_mode='gopls'
    " }

    " Ctags {
      " This will look in the current directory for 'tags', and work up the tree towards root until one is found. 
      set tags=./tags,tags,$HOME/vimtags
      map <F10> <C-W>g}
    " }

    " UltiSnip {
        let g:UltiSnipsExpandTrigger="<C-j>"
        let g:UltiSnipsJumpForwardTrigger="<C-j>"
        let g:UltiSnipsJumpBackwardTrigger="<C-k>"
    " }

    " NerdTree {
        " nnoremap <silent> <F12> :NERDTreeToggle<CR>:NERDTreeMirror<CR>
        map <leader>e :NERDTreeFind<CR>
        nmap <leader>nt :NERDTreeFind<CR>

        let NERDTreeShowBookmarks=1
        let NERDTreeIgnore=['tags', 'cscope\..*', '\.pyc', '\~$', '\.swo$', '\.swp$', '\.git', '\.hg', '\.svn', '\.bzr', '\.DS_Store$']
        let NERDTreeShowHidden=0
        let NERDTreeDirArrows=0
    " }

    " Tagbar {
        " nnoremap <silent> <F11> :TagbarToggle<CR>
        let g:tagbar_width = 31
        let g:tagbar_iconchars = ['+', '-']
    " }

    " vim-jsx {
        let g:jsx_ext_required = 0
    " }

    " fugitive {
        nnoremap <leader>gs :Gstatus<CR>
        nnoremap <leader>gd :Gdiff<CR>
        nnoremap <leader>gw :Gwrite<CR>
        nnoremap <leader>gc :Gcommit<CR>
    " }

    " syntastic {
        let g:syntastic_javascript_checkers = ['eslint']
    " }

    " ale {
        let g:ale_linters = {'javascript': ['standard']}
        let g:ale_fixers = {'javascript': ['standard']}
        let g:ale_lint_on_save = 1
        let g:ale_fix_on_save = 1
    " }

    " coc {
        let g:loaded_youcompleteme = 1
        " if hidden is not set, TextEdit might fail.
        set hidden

        " Some servers have issues with backup files, see #649
        set nobackup
        set nowritebackup

        " Better display for messages
        set cmdheight=2

        " Smaller updatetime for CursorHold & CursorHoldI
        set updatetime=300

        " don't give |ins-completion-menu| messages.
        set shortmess+=c

        " always show signcolumns
        set signcolumn=auto

        " Use tab for trigger completion with characters ahead and navigate.
        " Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
        inoremap <silent><expr> <TAB>
              \ pumvisible() ? "\<C-n>" :
              \ <SID>check_back_space() ? "\<TAB>" :
              \ coc#refresh()
        inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

        function! s:check_back_space() abort
          let col = col('.') - 1
          return !col || getline('.')[col - 1]  =~# '\s'
        endfunction

        " Use <c-space> to trigger completion.
        inoremap <silent><expr> <c-space> coc#refresh()

        " Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
        " Coc only does snippet and additional edit on confirm.
        inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

        " Use `[c` and `]c` to navigate diagnostics
        " nmap <silent> [c <Plug>(coc-diagnostic-prev)
        " nmap <silent> ]c <Plug>(coc-diagnostic-next)

        " Remap keys for gotos
        nmap <silent> gd <Plug>(coc-definition)
        nmap <silent> gy <Plug>(coc-type-definition)
        nmap <silent> gi <Plug>(coc-implementation)
        nmap <silent> gr <Plug>(coc-references)

        " Use K to show documentation in preview window
        nnoremap <silent> K :call <SID>show_documentation()<CR>

        function! s:show_documentation()
          if (index(['vim','help'], &filetype) >= 0)
            execute 'h '.expand('<cword>')
          else
            call CocAction('doHover')
          endif
        endfunction

        " Highlight symbol under cursor on CursorHold
        autocmd CursorHold * silent call CocActionAsync('highlight')

        " Remap for rename current word
        nmap <leader>rn <Plug>(coc-rename)

        " Remap for format selected region
        xmap <leader>f  <Plug>(coc-format-selected)
        nmap <leader>f  <Plug>(coc-format-selected)

        augroup mygroup
          autocmd!
          " Setup formatexpr specified filetype(s).
          autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
          " Update signature help on jump placeholder
          autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
        augroup end

        " Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
        xmap <leader>a  <Plug>(coc-codeaction-selected)
        nmap <leader>a  <Plug>(coc-codeaction-selected)

        " Remap for do codeAction of current line
        nmap <leader>ac  <Plug>(coc-codeaction)
        " Fix autofix problem of current line
        nmap <leader>qf  <Plug>(coc-fix-current)

        " Use `:Format` to format current buffer
        command! -nargs=0 Format :call CocAction('format')

        " Use `:Fold` to fold current buffer
        command! -nargs=? Fold :call     CocAction('fold', <f-args>)


        " Add diagnostic info for https://github.com/itchyny/lightline.vim
        let g:lightline = {
              \ 'colorscheme': 'wombat',
              \ 'active': {
              \   'left': [ [ 'mode', 'paste' ],
              \             [ 'cocstatus', 'readonly', 'filename', 'modified' ] ]
              \ },
              \ 'component_function': {
              \   'cocstatus': 'coc#status'
              \ },
              \ }



        " Using CocList
        " Show all diagnostics
        nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
        " Manage extensions
        nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
        " Show commands
        nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
        " Find symbol of current document
        nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
        " Search workspace symbols
        nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
        " Do default action for next item.
        nnoremap <silent> <space>j  :<C-u>CocNext<CR>
        " Do default action for previous item.
        nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
        " Resume latest coc list
        nnoremap <silent> <space>p  :<C-u>CocListResume<CR>
    " }
" }
